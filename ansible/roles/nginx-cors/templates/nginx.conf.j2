server {

  resolver 127.0.0.53;
  root /var/www/html;
 
  server_name files.{{domain_name}}; # managed by Certbot
  client_max_body_size 0;
 
  location / {
    # handle cors and allow all
    if ($request_method = OPTIONS ) {
       add_header Access-Control-Allow-Origin *;
       add_header Access-Control-Allow-Methods "GET, OPTIONS, PATCH, POST, PUT, HEAD";
       add_header Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id, Accept, Accept-Encoding, Accept-Language, Access-Control-Request-Headers, Access-Control-Request-Method, Cache-Control, DNT, User-Agent, X-Amz-Algorithm, X-Amz-Credential, X-Amz-Date, Amz-Expires, X-Amz-SignedHeaders, X-Amz-Signature, x-ms-blob-type";
       add_header Access-Control-Allow-Credentials "true";
       add_header Content-Length 0;
       add_header Content-Type text/plain;
       return 204;
   }
  
  proxy_set_header  Host "{{ cloud_storage_url | replace('https://', '') }}";
  # remove any CORS header from backend OSS S3
  proxy_hide_header      Access-Control-Allow-Origin;
  proxy_hide_header      Access-Control-Allow-Methods;
  proxy_hide_header      Access-Control-Allow-Headers;
  proxy_hide_header      Access-Control-Allow-Credentials;
 
  # inject our own CORS header to allow what we wanted 
  add_header  Access-Control-Allow-Credentials "true" always;
  add_header  Access-Control-Expose-Headers 'Content-Length,Content-Range,Connection,opc-client-info,opc-request-id' always;
  add_header  Access-Control-Allow-Origin  * always;
  add_header  Access-Control-Allow-Methods "GET,OPTIONS,PATCH,POST,PUT,HEAD" always;
  add_header  Access-Control-Allow-Headers "Access-Control-Allow-Origin, Authorization, Content-Type, user-id, Accept,Accept-Encoding,Accept-Language, Access-Control-Request-Headers, Access-Control-Request-Method,Cache-Control,DNT,Host,Origin,Pragma,Referer,User-Agent, X-Amz-Algorithm, X-Amz-Credential, X-Amz-Date, Amz-Expires, X-Amz-SignedHeaders, X-Amz-Signature, x-ms-blob-type" always;
  # 
  add_header  Referer "";
  # if get request, trim the query string
  if ($request_method = GET ) { 
    proxy_pass  {{cloud_storage_url}}$uri;
  }
  # pass everything to backend OSS S3
    proxy_pass  {{cloud_storage_url}};
     }
 
  listen [::]:443 ssl ipv6only=on; 
  listen 443 ssl; 
  ssl_certificate /etc/nginx/ssl_cert.pem; 
  ssl_certificate_key /etc/nginx/ssl_cert_key.pem; 

}
 
server {
    if ($host = files.{{domain_name}}) {
        return 301 https://$host$request_uri;
    } # managed by Certbot
    listen 80 ;
    listen [::]:80 ;
    server_name files.{{domain_name}};
    return 404; # managed by Certbot 
}