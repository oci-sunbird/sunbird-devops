# Notes:
# How To Run:
# Open a cloud shell session in your home region 
# Set the env variables 
# export COMPARTMENT_OCID='ocid1.compartment.oc1..aaaaaaaa' ## compartment id for creating resources
# export GEO_IP_LIC_KEY=xyxkjlas ## lic key for downloading geo ip 
# export OSS_NAMESPACE=ljlajsdflj   ### oci tenancy namespace
# export INSTANCE_PUBLIC_KEY='ssh-rsa AAAAB' ## ssh public key for logging in to compute instances

# git clone https://github.com/project-sunbird/sunbird-devops.git
# cd sunbird-devops && git checkout tags/release-6.0.0 -b release-6.0.0
# cd deploy/
# ansible-playbook  oci-provision.yaml

# Prerequisites:
# Login to oci console with admin user

############### Maxmind licence key ###########################
# To create license key
# Goto: https://www.maxmind.com/en/accounts/current/license-key
# Click: Generate a new license key.
# ##############################################################

---
- name: Create Network
  collections: 
    - oracle.oci
  hosts: localhost
  vars:
    vcn_cidr_block: "10.90.0.0/16"
    public_subnet_cidr_block: "10.90.1.0/24"
    private_subnet_cidr_block: "10.90.2.0/24"
    vcn_name: "SunbirdEd-VCN"
    vcn_dns_label: "sunbirded"
    compartment_id: "{{ lookup('env', 'COMPARTMENT_OCID') }}"
    tenancy_id: "{{ lookup('env', 'OCI_TENANCY')}}"
    namespace_name: "{{ lookup('env', 'OSS_NAMESPACE') }}"
    geoip_licence_key: "{{ lookup('env', 'GEO_IP_LIC_KEY') }}"
    authorized_key: "{{ lookup('env', 'INSTANCE_PUBLIC_KEY') }}"
    quad_zero_route: "0.0.0.0/0"
    instance_shape: "VM.Standard.E3.Flex"
    intance_os_version: "18.04"
    k8s_version: v1.27.2 
    ocpu: 1
    memory_in_gbs: 8
    oke_ocpu: 1
    oke_memory_in_gbs: 8
    private_vm_hdd: 60
    public_vm_hdd: 60
    private_vm_names:
      - kp
      - dp
      # - yarn
      # - db
      # - others
    public_vm_names:
      - jenkins
    private_containers:
      - private
      - artifacts
      - management
      - e-credentials
      - contents
      - reports
      - telemetry-data-store
      - data-store
      - manage-learn
      - uci 
      - dial
      - label
    public_containers:
      - public
    repo_name: testsunbird
    repo_list:
      - adminutil
      - assessment-service
      - bot
      - cert_registry_service
      - cert_service
      - content-service
      - creation-player
      - data-pipeline
      - discussion-middleware
      - echo-server
      - enc_service
      - gotenberg
      - groups_service
      - hawkeye
      - knowledge-mw-service
      - knowledge-platform-jobs
      - kong
      - learner_service
      - lms_service
      - ml-core-service
      - ml-projects-service
      - ml-reports-service
      - ml-survey-service
      - nodebb
      - notification_service
      - odk
      - opensaber
      - player
      - print-service
      - program-service
      - proxy
      - report-service
      - router
      - search-service
      - secor
      - sunbird-analytics-service
      - sunbird-datapipeline
      - sunbird-dial-service
      - sunbird-rc-certificate-api
      - sunbird-rc-certificate-signer
      - sunbird-rc-core
      - taxonomy-service
      - telemetry-service
      - uci-inbound
      - uci-orchestrator
      - uci-outbound
      - uci-transformer
      - uci_api  

  tasks: 
  - name: Check pre-requisites
    fail:
      msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
    when: item not in ansible_env
    with_items:
      - "COMPARTMENT_OCID"
      # - "OSS_NAMESPACE"
      # - "INSTANCE_PUBLIC_KEY"


  - name: Create user
    oci_identity_user:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-svc-test
      description: sunbird ed service user
      state: present
    register: result
    tags:
      - identity

  - set_fact:
      user_id: "{{ result.user.id }}"
      cacheable: yes
    tags:
      - identity

  - name: Create group
    oci_identity_group:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-svc-test-group
      description: User group for Sunbird Service Users
      state: present
    register: result
    tags:
      - identity
  - set_fact:
      group_id: "{{ result.group.id }}"
      cacheable: yes
    tags:
      - identity

  - name: Create user_group_membership
    oci_identity_user_group_membership:
      user_id: "{{user_id}}"
      group_id: "{{group_id}}"
      compartment_id: "{{tenancy_id}}"
      state: present
    tags:
      - identity

  - name: Create dynamic group
    oci_identity_dynamic_group:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-dg
      description: Dynamic Group for Sunbird BB
      matching_rule: "instance.compartment.id = '{{compartment_id}}'"
    tags:
      - identity

  - name: Create policy
    oci_identity_policy:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-policy
      description: Policy for Sunbird BB
      statements: 
      - "statements_example"
    tags:
      - identity

  # - name: Create auth_token
  #   oci_identity_auth_token:
  #     # required
  #     description: For sunbird ocir
  #     user_id: "{{user_id}}"
  #   register: result
  #   tags:
  #     - identity
  # - set_fact:
  #     auth_token: "{{ result.auth_token.token }}"
  #     cacheable: yes
  #   tags:
  #     - identity

  # - name: Create customer key
  #   oci_identity_customer_secret_key:
  #     display_name: For sunbird s3 operation
  #     user_id: "{{user_id}}"
  #   register: customer_key
  #   tags:
  #     - identity
  # - set_fact:
  #     s3_access_key: "{{ customer_key.customer_secret_key.id }}"
  #     s3_access_secret: "{{ customer_key.customer_secret_key.key }}"
  #     cacheable: yes
  #   tags:
  #     - identity

  - name: Showing resources info
    debug:
      msg:
        - OCIR auth token: "{{ auth_token }}"
        - S3 access key: "{{ s3_access_key }}"
        - S3 access secret : "{{ s3_access_secret }}"
    tags:
      - identity


  # - name: Showing resources info
  #   debug:
  #     msg:
  #       - Jenkins public ip: "{{ jenkins_vm.instances[0].primary_public_ip }}"
  #   tags:
  #     - info 

  # - name: Showing private vm ips
  #   debug:
  #     msg:
  #       "VM {{ item.instances[0].display_name }} private ip: {{ item.instances[0].primary_private_ip }}"
  #   with_items: "{{ nics.results }}"
  #   loop_control:
  #     label: "{{  item.instances[0].display_name  }}"
  #   tags:
  #     - info 

  # - name: Writing resource info to oci-resources.txt
  #   copy:
  #     dest: /tmp/oci-resources.txt
  #     content: |-
  #       ================================================================
  #       jenkins public ip={{ jenkins_vm.instances[0].primary_public_ip }}
  #   tags:
  #     - info 

  # - name: Writing machine ips to oci-resources.txt
  #   lineinfile:
  #     state: present
  #     insertbefore: EOF
  #     dest: /tmp/oci-resources.txt
  #     line: "{{ item.instances[0].display_name }} private ip={{ item.instances[0].primary_private_ip }}"
  #   with_items: "{{ nics.results }}"
  #   loop_control:
  #     label: "{{  item.instances[0].display_name   }}"
  #   tags:
  #     - info 

  # - debug:
  #     msg: ansible variable values to update for the installation is stored in /tmp/oci-resources.txt"
  #   tags:
  #     - info 