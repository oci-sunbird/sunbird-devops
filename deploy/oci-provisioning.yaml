---
- name: Create Network
  collections: 
    - oracle.oci
  hosts: localhost
  vars:
    vcn_cidr_block: "10.90.0.0/16"
    k8s_api_subnet_cidr_block: "10.90.1.0/24"
    k8s_worker_subnet_cidr_block: "10.90.2.0/24"
    k8s_lb_subnet_cidr_block: "10.90.3.0/24"
    k8s_vm_subnet_cidr_block: "10.90.4.0/24"
    vcn_name: "SunbirdEd-VCN"
    vcn_dns_label: "sunbirded"
    compartment_id: "{{ lookup('env', 'COMPARTMENT_OCID') }}"
    tenancy_id: "{{ lookup('env', 'OCI_TENANCY')}}"
    namespace_name: "{{ lookup('env', 'OSS_NAMESPACE') }}"
    geoip_licence_key: "{{ lookup('env', 'GEO_IP_LIC_KEY') }}"
    authorized_key: "{{ lookup('env', 'INSTANCE_PUBLIC_KEY') }}"
    quad_zero_route: "0.0.0.0/0"
    instance_shape: "VM.Standard.E3.Flex"
    intance_os_version: "18.04"
    ocpu: 1
    memory_in_gbs: 8
    private_vm_hdd: 60
    public_vm_hdd: 60
    private_vm_names:
      - kp
      - dp
      - yarn
      - db
      - others
    public_vm_names:
      - jenkins
    private_containers:
      - private
      - artifacts
      - management
      - e-credentials
      - contents
      - reports
      - telemetry-data-store
      - data-store
      - manage-learn
      - uci 
      - dial
      - label
    public_containers:
      - public
    repo_name: testsunbird
    repo_list:
      - adminutil
      - assessment-service
      # - bot
      # - cert_registry_service
      # - cert_service
      # - content-service
      # - creation-player
      # - data-pipeline
      # - discussion-middleware
      # - echo-server
      # - enc_service
      # - gotenberg
      # - groups_service
      # - hawkeye
      # - knowledge-mw-service
      # - knowledge-platform-jobs
      # - kong
      # - learner_service
      # - lms_service
      # - ml-core-service
      # - ml-projects-service
      # - ml-reports-service
      # - ml-survey-service
      # - nodebb
      # - notification_service
      # - odk
      # - opensaber
      # - player
      # - print-service
      # - program-service
      # - proxy
      # - report-service
      # - router
      # - search-service
      # - secor
      # - sunbird-analytics-service
      # - sunbird-datapipeline
      # - sunbird-dial-service
      # - sunbird-rc-certificate-api
      # - sunbird-rc-certificate-signer
      # - sunbird-rc-core
      # - taxonomy-service
      # - telemetry-service
      # - uci-inbound
      # - uci-orchestrator
      # - uci-outbound
      # - uci-transformer
      # - uci_api  

  tasks: 
  - name: Check pre-requisites
    fail:
      msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
    when: item not in ansible_env
    with_items:
      - "COMPARTMENT_OCID"
      - "OSS_NAMESPACE"
      - "INSTANCE_PUBLIC_KEY"

  - name: Create a VCN
    oci_network_vcn:
      compartment_id: "{{ compartment_id }}"
      display_name: "{{ vcn_name }}"
      cidr_block: "{{ vcn_cidr_block }}"
      dns_label: "{{ vcn_dns_label }}"
    register: result
    tags:
      - network

  - set_fact:
      vcn_id: "{{ result.vcn.id }}"
      vcn: "{{ result.vcn }}"
      cacheable: yes
    tags:
      - network

  - name: Get availability domains for vlans
    oci_identity_availability_domain_facts:
      compartment_id: "{{compartment_id}}"
    register: oci_ads
    tags:
      - always

  - name: Get all services
    oci_network_service_facts:
    register: oci_services
    tags:
      - always

  - name: Get all images
    oci_compute_image_facts:
      compartment_id: "{{compartment_id}}"
      shape: "{{instance_shape}}"
      operating_system  : "Canonical Ubuntu"
      operating_system_version: "{{intance_os_version}}"
    register: oci_images
    tags:
      - always

  # - name: filter query
  #   debug:
  #     msg: "{{ item.display_name }}"
  #   loop: "{{oci_images.images | selectattr('operating_system', 'equalto', 'Canonical Ubuntu') | selectattr('operating_system_version', 'equalto', '18.04')| list}}"
  #   tags:
  #     - always


  - set_fact:
      availability_domain: "{{oci_ads.availability_domains[0].name}}"
      oci_all_service_id: "{{oci_services.services[1].id}}"
      oci_all_service_cidr: "{{oci_services.services[1].cidr_block}}"
      instance_image_id: "{{oci_images.images[0].id}}"
    tags:
      - always

  - name: Create a new Internet Gateway
    oci_network_internet_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "IG"
      is_enabled: 'yes'
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      ig_id: "{{ result.internet_gateway.id }}"
      public_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ result.internet_gateway.id }}"
    tags:
      - network

  - name: Create a new NAT Gateway
    oci_network_nat_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "NG"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      ng_id: "{{ result.nat_gateway.id }}"
      private_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ result.nat_gateway.id }}"
    tags:
      - network

  - name: Create a new Service Gateway
    oci_network_service_gateway:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      services:  
        - service_id: "{{oci_all_service_id}}"
      display_name: "SVC_GW"
      state: 'present'
    register: result
    tags:
      - network


  - name: Create route table to connect internet gateway to the VCN
    oci_network_route_table:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "PUB-SL-RT"
      route_rules: "{{ public_route_table_rules }}"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      public_rt_id: "{{ result.route_table.id }}"
    tags:
      - network

  - name: Create route table to connect Nat gateway to the VCN
    oci_network_route_table:
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      name: "PVT-SL-RT"
      route_rules: "{{ private_route_table_rules }}"
      state: 'present'
    register: result
    tags:
      - network

  - set_fact:
      private_rt_id: "{{ result.route_table.id }}"
    tags:
      - network

  - name: Create security list for K8S API
    oci_network_security_list:
      display_name: K8S-API-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      - description: "Allow outgoing traffic to OCI services"
        destination: "{{oci_all_service_cidr}}"
        destination_type: SERVICE_CIDR_BLOCK
        protocol: "all"
        is_stateless: false
      ingress_security_rules:
      - description: "Allow kube api ep access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 6443
            min: 6443
      - description: "Allow kubelet access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 12250
            min: 12250
      - description: "Path Discovery"
        protocol: 1
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        icmp_options:
          type: 3
          code: 4
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      k8s_security_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s

  - name: Create security list for K8S Worker
    oci_network_security_list:
      display_name: K8S-Worker-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      ingress_security_rules:
      - description: "Allow  access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
      - description: "Path Discovery"
        protocol: 1
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        icmp_options:
          type: 3
          code: 4
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      k8s_worker_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s

  - name: Create security list for VM
    oci_network_security_list:
      display_name: VM-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      ingress_security_rules:
      - description: "Allow  access from within the vcn"
        protocol: 6
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
      - description: "Path Discovery"
        protocol: 1
        source: "{{vcn_cidr_block}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        icmp_options:
          type: 3
          code: 4
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      vm_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s

  - name: Create security list for LB
    oci_network_security_list:
      display_name: PUB-LB-SL
      compartment_id: "{{ compartment_id }}"
      vcn_id: "{{ vcn_id }}"
      egress_security_rules:
      - description: "Allow outgoing traffic"
        destination: "{{ quad_zero_route }}"
        protocol: "all"
        destination_type: CIDR_BLOCK
        is_stateless: false
      ingress_security_rules:
      - description: "allow all http traffic"
        protocol: 6
        source: "{{quad_zero_route}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 80
            min: 80
      - description: "allow all https traffic"
        protocol: 6
        source: "{{quad_zero_route}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 443
            min: 443
      - description: "allow ssh traffic"
        protocol: 6
        source: "{{quad_zero_route}}"
        is_stateless: false
        source_type: CIDR_BLOCK
        tcp_options:
          destination_port_range:
            max: 22
            min: 22
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      lb_list_id: "{{ result.security_list.id }}"
      cacheable: yes
    tags:
      - network
      - k8s


  - name: Create a Subnet for K8S API
    oci_network_subnet:
      cidr_block: "{{ k8s_api_subnet_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "K8S-API-SN"
      route_table_id: "{{ private_rt_id }}"
      security_list_ids:
        - "{{k8s_security_list_id}}"
      dns_label: "k8sapi"
      prohibit_public_ip_on_vnic: yes
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s

  - name: Create a Subnet for K8S Woker
    oci_network_subnet:
      cidr_block: "{{ k8s_worker_subnet_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "K8S-WORKER-SN"
      route_table_id: "{{ private_rt_id }}"
      security_list_ids:
        - "{{k8s_worker_list_id}}"
      dns_label: "k8sworker"
      prohibit_public_ip_on_vnic: yes
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s

  - name: Create a Subnet for VM
    oci_network_subnet:
      cidr_block: "{{ k8s_vm_subnet_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "VM-SN"
      route_table_id: "{{ private_rt_id }}"
      security_list_ids:
        - "{{vm_list_id}}"
      dns_label: "vm"
      prohibit_public_ip_on_vnic: yes
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      vm_subnet_id: "{{ result.subnet.id }}"
      cacheable: yes


  - name: Create a Subnet for LB
    oci_network_subnet:
      cidr_block: "{{ k8s_lb_subnet_cidr_block }}"
      compartment_id: "{{ compartment_id }}"
      display_name: "PB-LB-SN"
      route_table_id: "{{ public_rt_id }}"
      security_list_ids:
        - "{{lb_list_id}}"
      dns_label: "publb"
      prohibit_public_ip_on_vnic: no
      vcn_id: "{{ vcn_id }}"
    register: result
    tags:
      - network
      - k8s
  - set_fact:
      lb_subnet_id: "{{ result.subnet.id }}"
      cacheable: yes
  # - name: Create Private Buckets
  #   oci_object_storage_bucket:
  #     namespace_name: "{{ namespace_name }}" 
  #     compartment_id: "{{ compartment_id }}"
  #     public_access_type: NoPublicAccess
  #     storage_tier: Standard
  #     name: "{{ item }}"
  #   with_items: "{{ private_containers }}"
  #   tags:
  #     - oss

  # - name: Create Public Buckets
  #   oci_object_storage_bucket:
  #     # required
  #     namespace_name: "{{ namespace_name }}" 
  #     compartment_id: "{{ compartment_id }}"
  #     public_access_type: ObjectRead
  #     storage_tier: Standard
  #     name: "{{ item }}"
  #   with_items: "{{ public_containers }}"
  #   tags:
  #     - oss

  # - name: Create a temporary sample file to upload
  #   tempfile:
  #   register: tmpfile1
  #   tags:
  #     - oss
  # - name: Put content in the temporary sample file
  #   copy:
  #     content: "This is content for the sample file."
  #     dest: "{{ tmpfile1.path }}"
  #   tags:
  #     - oss
  # - name: Creating folder structurue
  #   oci_object_storage_object:
  #     namespace_name: "{{ namespace_name }}"
  #     bucket_name: contents
  #     object_name: "{{ item }}/tmpfile1.txt"
  #     src: "{{ tmpfile1.path }}"
  #   with_items:
  #     - collection-editor
  #     - generic-editor
  #     - content-edition
  #     - v3/preview
  #     - terms-and-conditions
  #   tags:
  #     - oss

  # - name: Downloading terms-and-conditions
  #   get_url:
  #     url: https://sunbirdpublic.blob.core.windows.net/installation/terms-and-conditions/terms-and-conditions-v9.html
  #     dest: /tmp/terms-and-conditions-v9.html
  #     mode: '0440'
  #   tags:
  #     - oss

  # - name: Uploading T&C
  #   oci_object_storage_object:
  #     namespace_name: "{{namespace_name}}"
  #     bucket_name: contents
  #     object_name: "terms-and-conditions/terms-and-conditions-v9.html"
  #     src: /tmp/terms-and-conditions-v9.html
  #     content_type: 'text/plain'
  #   tags:
  #     - oss

  # - name: Downloading GeoIP2
  #   get_url:
  #     url: "https://download.maxmind.com/app/geoip_download?edition_id={{ item.type }}&license_key={{ geoip_licence_key }}&suffix={{ item.prefix }}"
  #     dest: "/tmp/geoip2_db.{{ item.prefix }}"
  #     mode: '0440'
  #   with_items:
  #     - {type: 'GeoLite2-City-CSV', prefix: 'zip' }
  #     - {type: 'GeoLite2-City', prefix: 'tar.gz'}
  #   tags:
  #     - oss
  # - name: Uploading GeoIP2 to artifacts
  #   oci_object_storage_object:
  #     namespace_name: "{{namespace_name}}"
  #     bucket_name: artifacts
  #     object_name: "geoip2_db.{{ item }}"
  #     src: /tmp/geoip2_db.{{ item }}
  #     content_type: 'text/plain'
  #   with_items:
  #     - zip
  #     - tar.gz
  #   tags:
  #     - oss

  # - name: Uploading labels
  #   shell:
  #      "oci os object bulk-upload --bucket-name label --prefix 'labels/' --src-dir ../utils/portal/labels/ --namespace {{ namespace_name }} -–overwrite"
  #   tags:
  #     - oss

  # - name: Unarchive plugins
  #   unarchive:
  #     src: "https://sunbirdpublic.blob.core.windows.net/installation/content-plugins.zip"
  #     dest: /tmp/
  #     creates: /tmp/content-plugins
  #     remote_src: yes
  #   tags:
  #     - oss

  # - name: Upload Content plugins
  #   shell:
  #      "oci os object bulk-upload --bucket-name contents --prefix 'content-plugins/' --src-dir /tmp/content-plugins/ --namespace {{ namespace_name }} "
  #   tags:
  #     - oss  

  # - name: Create ocir repos 
  #   shell:
  #      "oci artifacts container repository create --compartment-id {{compartment_id}} --display-name {{repo_name}}/{{item}} "
  #   with_items: "{{ repo_list }}"
  #   tags:
  #     - ocir  

  # - name: Create container_repository
  #   oci_artifacts_container_repository:
  #     compartment_id: "{{ compartment_id }}"
  #     display_name: "{{repo_name}}/{{item}}"
  #     is_public: false
  #     readme:
  #       content: "container registry for Sunbird deployment - {{item}} "
  #       format: TEXT_MARKDOWN
  #   with_items: "{{ repo_list }}"
  #   tags:
  #     - ocir      

  # - name: Launch private instance
  #   oci_compute_instance:
  #     availability_domain: "{{ availability_domain }}"
  #     compartment_id: "{{ compartment_id }}"
  #     name: "{{ item }}"
  #     image_id: "{{ instance_image_id }}"
  #     shape: "{{ instance_shape }}"
  #     source_details:
  #       boot_volume_size_in_gbs: "{{private_vm_hdd}}"
  #       image_id: "{{ instance_image_id }}"
  #       source_type: "image"
  #     shape_config: 
  #       ocpus: "{{ ocpu }}"
  #       memory_in_gbs: "{{ memory_in_gbs }}"
  #     create_vnic_details:
  #       assign_public_ip: False
  #       hostname_label: "{{ item }}"
  #       subnet_id: "{{ vm_subnet_id }}"
  #     metadata:
  #       ssh_authorized_keys: "{{ authorized_key }}"
  #   with_items: "{{ private_vm_names }}"
  #   register: result

  # - name: Launch jenkins instance
  #   oci_compute_instance:
  #     availability_domain: "{{ availability_domain }}"
  #     compartment_id: "{{ compartment_id }}"
  #     name: "{{ item }}"
  #     image_id: "{{ instance_image_id }}"
  #     shape: "{{ instance_shape }}"
  #     source_details:
  #       boot_volume_size_in_gbs: "{{public_vm_hdd}}"
  #       image_id: "{{ instance_image_id }}"
  #       source_type: "image"
  #     shape_config: 
  #       ocpus: "{{ ocpu }}"
  #       memory_in_gbs: "{{ memory_in_gbs }}"
  #     create_vnic_details:
  #       assign_public_ip: True
  #       hostname_label: "{{ item }}"
  #       subnet_id: "{{ lb_subnet_id }}"
  #     metadata:
  #       ssh_authorized_keys: "{{ authorized_key }}"
  #   with_items: "{{ public_vm_names }}"
  #   register: result


  - name: Create user
    oci_identity_user:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-svc-test
      description: sunbird ed service user
      state: present
    register: result
    tags:
      - identity

  - set_fact:
      user_id: "{{ result.user.id }}"
      cacheable: yes
    tags:
      - identity

  - name: Create group
    oci_identity_group:
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-svc-test-group
      description: User group for Sunbird Service Users
      state: present
    register: result
    tags:
      - identity
  - set_fact:
      group_id: "{{ result.group.id }}"
      cacheable: yes
    tags:
      - identity

### Temporary disabled, as test login user doenst have the right privlieges
  # - name: Create user_group_membership
  #   oci_identity_user_group_membership:
  #     user_id: "{{user_id}}"
  #     group_id: "{{group_id}}"
  #     compartment_id: "{{tenancy_id}}"
  #     state: present
  #   tags:
  #     - identity
## Tempoary Disabled end

  - name: Create dynamic group
    oci_identity_dynamic_group:
      # required
      compartment_id: "{{tenancy_id}}"
      name: sunbirded-dg
      description: Dynamic Group for Sunbird BB
      matching_rule: "instance.compartment.id = '{{compartment_id}}'"
    tags:
      - identity

### Temporary disabled, as test login user doenst have the right privlieges
  # - name: Create auth_token
  #   oci_identity_auth_token:
  #     # required
  #     description: For sunbird ocir
  #     user_id: "{{user_id}}"
  #   register: result
  #   tags:
  #     - identity
  # - set_fact:
  #     auth_token: "{{ result.auth_token.token }}"
  #     cacheable: yes
  #   tags:
  #     - identity

  # - name: Showing resources info
  #   debug:
  #     msg:
  #       - OCIR auth token: "{{ auth_token }}"
  #   tags:
  #     - identity
## Tempoary Disabled end